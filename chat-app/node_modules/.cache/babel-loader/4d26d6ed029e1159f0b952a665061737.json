{"ast":null,"code":"var _jsxFileName = \"C:\\\\WORK\\\\react\\\\projects_5\\\\chat-app\\\\src\\\\context\\\\AuthContext.js\",\n    _s = $RefreshSig$();\n\nimport { onAuthStateChanged } from \"firebase/auth\";\nimport { createContext, useEffect, useState } from \"react\";\nimport { auth } from \"../firebase\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthContextProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [currentUser, setCurrentUser] = useState(); //check whether we have a user or not\n\n  useEffect(() => {\n    //auth function will tell whether the user logged in or not\n    const unsub = onAuthStateChanged(auth, user => {\n      setCurrentUser(user); //if user logged in, set up the user in context\n\n      console.log(user);\n    }); //while listening on live events, you should use a cleanup function\n\n    return () => {\n      unsub();\n    };\n  }, []); //{children} will be our whole application components\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      currentUser\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthContextProvider, \"weNTBXcC62DPmZO+PUtwIm8P/FM=\");\n\n_c = AuthContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"sources":["C:/WORK/react/projects_5/chat-app/src/context/AuthContext.js"],"names":["onAuthStateChanged","createContext","useEffect","useState","auth","AuthContext","AuthContextProvider","children","currentUser","setCurrentUser","unsub","user","console","log"],"mappings":";;;AAAA,SAASA,kBAAT,QAAmC,eAAnC;AACA,SAASC,aAAT,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,SAASC,IAAT,QAAqB,aAArB;;AAEA,OAAO,MAAMC,WAAW,gBAAGJ,aAAa,EAAjC;AAEP,OAAO,MAAMK,mBAAmB,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AACnD,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCN,QAAQ,EAA9C,CADmD,CAGnD;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,UAAMQ,KAAK,GAAGV,kBAAkB,CAACI,IAAD,EAAQO,IAAD,IAAU;AAC/CF,MAAAA,cAAc,CAACE,IAAD,CAAd,CAD+C,CACzB;;AACtBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACD,KAH+B,CAAhC,CAFc,CAOd;;AACA,WAAO,MAAM;AACXD,MAAAA,KAAK;AACN,KAFD;AAGD,GAXQ,EAWN,EAXM,CAAT,CAJmD,CAiBnD;;AACA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAEF,MAAAA;AAAF,KAA7B;AAAA,cACGD;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAvBM;;GAAMD,mB;;KAAAA,mB","sourcesContent":["import { onAuthStateChanged } from \"firebase/auth\";\r\nimport { createContext, useEffect, useState } from \"react\";\r\nimport { auth } from \"../firebase\";\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport const AuthContextProvider = ({ children }) => {\r\n  const [currentUser, setCurrentUser] = useState();\r\n\r\n  //check whether we have a user or not\r\n  useEffect(() => {\r\n    //auth function will tell whether the user logged in or not\r\n    const unsub = onAuthStateChanged(auth, (user) => {\r\n      setCurrentUser(user); //if user logged in, set up the user in context\r\n      console.log(user);\r\n    });\r\n\r\n    //while listening on live events, you should use a cleanup function\r\n    return () => {\r\n      unsub();\r\n    };\r\n  }, []);\r\n\r\n  //{children} will be our whole application components\r\n  return (\r\n    <AuthContext.Provider value={{ currentUser }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}